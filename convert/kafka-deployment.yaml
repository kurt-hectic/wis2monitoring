apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f ../docker-compose.yml
    kompose.version: 1.26.0 (40646f47)
  creationTimestamp: null
  labels:
    io.kompose.service: kafka
  name: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: kafka
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f ../docker-compose.yml
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.network/: "true"
        io.kompose.service: kafka
    spec:
      containers:
        - env:
            - name: ALLOW_PLAINTEXT_LISTENER
              value: "yes"
            - name: KAFKA_BROKER_ID
              value: "1"
            - name: KAFKA_CFG_ADVERTISED_LISTENERS
              value: 'PLAINTEXT://:'
            - name: KAFKA_CFG_LISTENERS
              value: 'PLAINTEXT://:'
            - name: KAFKA_CFG_ZOOKEEPER_CONNECT
              value: zookeeper:2181
            - name: KAFKA_OPTS
              value: -javaagent:/opt/bitnami/kafka/libs/kafka-jmx-prometheus-javaagent-1.0.1.jar=7071:/opt/agents/kafka_jmx_exporter.yml
          image: bitnami/kafka:latest
          name: kafka
          ports:
            - containerPort: 0
            - containerPort: 7071
          resources: {}
          volumeMounts:
            - mountPath: /opt/agents/kafka_jmx_exporter.yml
              name: kafka-claim0
            - mountPath: /opt/bitnami/kafka/libs/kafka-jmx-prometheus-javaagent-1.0.1.jar
              name: kafka-claim1
      restartPolicy: Always
      volumes:
        - name: kafka-claim0
          persistentVolumeClaim:
            claimName: kafka-claim0
        - name: kafka-claim1
          persistentVolumeClaim:
            claimName: kafka-claim1
status: {}
