version: "3"
services:


  

  zookeeper:
    image: 'bitnami/zookeeper:latest'
    container_name: zookeeper
    #ports:
    #  - '2181:2181'
    expose:
      - 2181
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: 'bitnami/kafka:latest'
    hostname: ${KAFKA_NAME}
    container_name: ${KAFKA_NAME}
    #ports:
    #  - '${KAFKA_PORT}:${KAFKA_PORT}'
    #  - '7071:7071'
    expose:
      - ${KAFKA_PORT}
      - 7071

    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:${KAFKA_PORT}
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:${KAFKA_PORT}
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_OPTS=-javaagent:/opt/bitnami/kafka/libs/kafka-jmx-prometheus-javaagent-1.0.1.jar=7071:/opt/agents/kafka_jmx_exporter.yml
    volumes:
      - ./jmx-exporter/kafka_jmx_exporter.yml/:/opt/agents/kafka_jmx_exporter.yml
      - ./jmx-exporter/jmx_prometheus_javaagent-1.0.1.jar:/opt/bitnami/kafka/libs/kafka-jmx-prometheus-javaagent-1.0.1.jar
      
    depends_on:
      - zookeeper

  
  trino:
    image: trinodb/trino
    container_name: trino
    ports:
      - "8080:8080"
    volumes:
      - ./trino/config/log.properties:/etc/trino/log.properties
      - ./trino/config/notifications-tostorage.json:/etc/trino/kafka/notifications-tostorage.json
      - ./trino/catalog/:/etc/trino/catalog/

    depends_on:
      - kafka

      

  wis2bridge:
    build: wis2bridge/.
    container_name: wis2bridge
    volumes:
      - ./wis2bridge:/app
    expose:
      - ${METRIC_PORT}
    environment:
      - KAFKA_BROKER=${KAFKA_NAME}:${KAFKA_PORT}
      - TOPICS=cache/a/wis2/+/+/data/core/weather/surface-based-observations/synop,cache/a/wis2/+/data/core/weather/surface-based-observations/synop
      #- WIS_BROKER_HOST=globalbroker.meteo.fr
      #- WIS_BROKER_PORT=8883
      #- VALIDATE_SSL=True 
      - WIS_BROKER_HOST=mosquitto
      - WIS_BROKER_PORT=1883
      - VALIDATE_SSL=False
      - WIS_USERNAME=everyone
      - WIS_PASSWORD=everyone
      - LOG_LEVEL=INFO
      - KAFKA_TOPIC=${NOTIFICATION_TOPIC}
      - REPORTING_THRESHOLD=500
      - BATCH_SIZE=50
      - CLIENT_ID=wis2bridge_test_
      - CUSTOMERS_HOST=${KAFKA_NAME}
      - CUSTOMERS_PORT=${KAFKA_PORT}
      - METRIC_PORT=${METRIC_PORT}
    depends_on:
      - kafka
    tty: true

  notification-dedup:
    build: 
      context: .
      dockerfile: ./Dockerfile-notification-dedup
    container_name: notification-dedup
    #volumes:
    #  - ./notification-dedup:/app
    expose:
      - ${METRIC_PORT}
    environment:
      - KAFKA_BROKER=${KAFKA_NAME}:${KAFKA_PORT}
      - KAFKA_TOPIC=${NOTIFICATION_TOPIC}
      - KAFKA_PUBTOPIC=${NOTIFICATION_TOPIC_DEDUP}
      - KAFKA_ERROR_TOPIC=${ERROR_TOPIC}
      - LOG_LEVEL=INFO
      - POLL_TIMEOUT_SEC=10
      - POLL_BATCH_SIZE=50
      - CUSTOMERS_HOST=${KAFKA_NAME}
      - CUSTOMERS_PORT=${KAFKA_PORT}
      - METRIC_PORT=${METRIC_PORT}
    depends_on:
      - kafka
    tty: true

  content-processor:
    build: 
      context: .
      dockerfile: ./Dockerfile-content-processor
    container_name: content-processor
    #volumes:
    #  - ./content-processor:/app   
    expose:
      - ${METRIC_PORT}
    environment:
      - KAFKA_BROKER=${KAFKA_NAME}:${KAFKA_PORT}
      - KAFKA_TOPIC=${NOTIFICATION_TOPIC_DEDUP}
      - KAFKA_PUBTOPIC=${NOTIFICATION_TOPIC_CONTENT}
      - KAFKA_ERROR_TOPIC=${ERROR_TOPIC}
      - LOG_LEVEL=INFO
      - POLL_TIMEOUT_SEC=2
      - POLL_BATCH_SIZE=10
      - NR_THREADS=2
      - CUSTOMERS_HOST=${KAFKA_NAME}
      - CUSTOMERS_PORT=${KAFKA_PORT}
      - METRIC_PORT=${METRIC_PORT}
    depends_on:
      - kafka
    tty: true

  decoding-processor:
    build: 
      context: .
      dockerfile: ./Dockerfile-decoding-processor
    container_name: decoding-processor
    #volumes:
    #  - ./decoding-processor:/app
    expose:
      - ${METRIC_PORT}
    environment:
      - KAFKA_BROKER=${KAFKA_NAME}:${KAFKA_PORT}
      - KAFKA_TOPIC=${NOTIFICATION_TOPIC_CONTENT}
      - KAFKA_PUBTOPIC=${NOTIFICATION_TOPIC_OUTPUT}
      - LOG_LEVEL=INFO
      - POLL_TIMEOUT_SEC=2
      - POLL_BATCH_SIZE=10
      - CUSTOMERS_HOST=${KAFKA_NAME}
      - CUSTOMERS_PORT=${KAFKA_PORT}
      - METRIC_PORT=${METRIC_PORT}
    depends_on:
      - kafka
    tty: true


  output-processor:
    build: 
      context: .
      dockerfile: ./Dockerfile-output-processor
    container_name: output-processor
    #volumes:
    #  - ./output-processor:/app
    expose:
      - ${METRIC_PORT}
    environment:
      - KAFKA_BROKER=${KAFKA_NAME}:${KAFKA_PORT}
      - KAFKA_TOPIC=${NOTIFICATION_TOPIC_OUTPUT}
      - KAFKA_PUBTOPIC=${NOTIFICATION_TOPIC_TOSTORAGE}
      - LOG_LEVEL=INFO
      - POLL_TIMEOUT_SEC=30
      - POLL_BATCH_SIZE=500
      - CUSTOMERS_HOST=${KAFKA_NAME}
      - CUSTOMERS_PORT=${KAFKA_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PW=${DB_PW}
      - DB_HOST_NAME=${DB_HOST_NAME}
      - METRIC_PORT=${METRIC_PORT}
    depends_on:
      - kafka
    tty: true

  mosquitto:
    image: eclipse-mosquitto
    hostname: mosquitto
    container_name: mosquitto
    restart: unless-stopped
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./test-broker:/etc/mosquitto
      - ./test-broker/mosquitto.conf:/mosquitto/config/mosquitto.conf
    

  mqtt-producer:
    build: ./test-node/.

    volumes:
      - ./test-node:/app

    container_name: mqtt-producer
    working_dir: /app
    command: bash publoop.sh

    environment:
      - SLEEPRATE=0.1

    depends_on:
      - mosquitto

    tty: true


  test-cache:
    hostname: test-cache
    container_name: test-cache
    image: nginx
    expose:
      - 80
    volumes:
      - ./test-cache/njs/:/etc/nginx/njs/:ro
      - ./test-cache/cache-files:/usr/share/nginx/html
      - ./test-cache/nginx.conf:/etc/nginx/nginx.conf
    environment:
      - NGINX_HOST=test-cache
      - FAIL_RATE=0.5

    networks:
      default:
        aliases:
          - test-cache-2
          - test-cache-3

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    expose:
      - 9090
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
    #  - prom_data:/prometheus
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    expose:
      - 3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./grafana:/etc/grafana/provisioning/datasources
    #  - 'grafana_storage:/var/lib/grafana'

volumes:
  grafana_storage: {}
  hive-db:
  warehouse:

#  prom_data:

    
